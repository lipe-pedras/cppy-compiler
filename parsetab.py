
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTleftEQNELTLEGTGEleftPLUSMINUSleftTIMESDIVIDErightPOWERrightUMINUSAND ASSIGN COMMA DIVIDE ELIF ELSE EQ FALSE FLOAT_NUM GE GT IDENTIFIER IF INTEGER LBRACE LE LPAREN LT MINUS NE NOT OR PLUS POWER PRINT RBRACE READ RPAREN SEMICOLON STRING_LITERAL TIMES TRUE TYPE_BOOL TYPE_CHAR TYPE_FLOAT TYPE_INT TYPE_STRING WHILEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : assignment_or_declaration\n                 | conditional_statement\n                 | repetition_statement\n                 | print_statement\n                 | read_statementoptional_type : TYPE_INT\n                     | TYPE_FLOAT\n                     | TYPE_STRING\n                     | TYPE_CHAR\n                     | TYPE_BOOL\n                     | emptyassignment_or_declaration : optional_type IDENTIFIER ASSIGN expression SEMICOLONconditional_statement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optionalelif_list : elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE\n                 | emptyelse_optional : ELSE LBRACE statement_list RBRACE\n                     | emptyrepetition_statement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEprint_statement : PRINT LPAREN expression RPAREN SEMICOLONread_statement : READ LPAREN identifier_list RPAREN SEMICOLONidentifier_list : identifier_list COMMA IDENTIFIER\n                       | IDENTIFIERexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression POWER expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expressionexpression : NOT expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : INTEGER\n                  | FLOAT_NUM\n                  | STRING_LITERAL\n                  | IDENTIFIER\n                  | TRUE\n                  | FALSEempty :'
    
_lr_action_items = {'IF':([0,2,3,4,5,6,7,8,20,63,65,79,80,81,83,84,85,86,87,88,89,92,94,96,98,99,100,101,],[10,10,-3,-4,-5,-6,-7,-8,-2,-15,10,10,-22,-23,10,10,-48,-21,-48,-18,-16,-20,10,10,-19,10,10,-17,]),'WHILE':([0,2,3,4,5,6,7,8,20,63,65,79,80,81,83,84,85,86,87,88,89,92,94,96,98,99,100,101,],[11,11,-3,-4,-5,-6,-7,-8,-2,-15,11,11,-22,-23,11,11,-48,-21,-48,-18,-16,-20,11,11,-19,11,11,-17,]),'PRINT':([0,2,3,4,5,6,7,8,20,63,65,79,80,81,83,84,85,86,87,88,89,92,94,96,98,99,100,101,],[12,12,-3,-4,-5,-6,-7,-8,-2,-15,12,12,-22,-23,12,12,-48,-21,-48,-18,-16,-20,12,12,-19,12,12,-17,]),'READ':([0,2,3,4,5,6,7,8,20,63,65,79,80,81,83,84,85,86,87,88,89,92,94,96,98,99,100,101,],[13,13,-3,-4,-5,-6,-7,-8,-2,-15,13,13,-22,-23,13,13,-48,-21,-48,-18,-16,-20,13,13,-19,13,13,-17,]),'TYPE_INT':([0,2,3,4,5,6,7,8,20,63,65,79,80,81,83,84,85,86,87,88,89,92,94,96,98,99,100,101,],[14,14,-3,-4,-5,-6,-7,-8,-2,-15,14,14,-22,-23,14,14,-48,-21,-48,-18,-16,-20,14,14,-19,14,14,-17,]),'TYPE_FLOAT':([0,2,3,4,5,6,7,8,20,63,65,79,80,81,83,84,85,86,87,88,89,92,94,96,98,99,100,101,],[15,15,-3,-4,-5,-6,-7,-8,-2,-15,15,15,-22,-23,15,15,-48,-21,-48,-18,-16,-20,15,15,-19,15,15,-17,]),'TYPE_STRING':([0,2,3,4,5,6,7,8,20,63,65,79,80,81,83,84,85,86,87,88,89,92,94,96,98,99,100,101,],[16,16,-3,-4,-5,-6,-7,-8,-2,-15,16,16,-22,-23,16,16,-48,-21,-48,-18,-16,-20,16,16,-19,16,16,-17,]),'TYPE_CHAR':([0,2,3,4,5,6,7,8,20,63,65,79,80,81,83,84,85,86,87,88,89,92,94,96,98,99,100,101,],[17,17,-3,-4,-5,-6,-7,-8,-2,-15,17,17,-22,-23,17,17,-48,-21,-48,-18,-16,-20,17,17,-19,17,17,-17,]),'TYPE_BOOL':([0,2,3,4,5,6,7,8,20,63,65,79,80,81,83,84,85,86,87,88,89,92,94,96,98,99,100,101,],[18,18,-3,-4,-5,-6,-7,-8,-2,-15,18,18,-22,-23,18,18,-48,-21,-48,-18,-16,-20,18,18,-19,18,18,-17,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,14,15,16,17,18,19,20,22,23,24,25,26,27,29,30,44,45,46,47,48,49,50,51,52,53,54,55,56,62,63,65,79,80,81,83,84,85,86,87,88,89,92,93,94,96,98,99,100,101,],[-48,-48,-3,-4,-5,-6,-7,-8,21,-9,-10,-11,-12,-13,-14,-2,34,34,34,40,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,82,-15,-48,-48,-22,-23,-48,-48,-48,-21,-48,-18,-16,-20,34,-48,-48,-19,-48,-48,-17,]),'$end':([1,2,3,4,5,6,7,8,20,63,80,81,85,86,87,88,89,92,98,101,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-15,-22,-23,-48,-21,-48,-18,-16,-20,-19,-17,]),'RBRACE':([3,4,5,6,7,8,20,63,80,81,83,84,85,86,87,88,89,92,96,98,100,101,],[-3,-4,-5,-6,-7,-8,-2,-15,-22,-23,85,86,-48,-21,-48,-18,-16,-20,98,-19,101,-17,]),'LPAREN':([10,11,12,13,22,23,24,26,27,29,30,44,45,46,47,48,49,50,51,52,53,54,55,56,90,93,],[22,23,24,25,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,93,27,]),'ASSIGN':([21,],[26,]),'NOT':([22,23,24,26,27,29,30,44,45,46,47,48,49,50,51,52,53,54,55,56,93,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'MINUS':([22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,93,95,],[29,29,29,29,29,45,29,29,-42,-43,-44,-45,-46,-47,45,45,45,45,29,29,29,29,29,29,29,29,29,29,29,29,29,-40,45,-41,-26,-27,-28,-29,-30,45,45,45,45,45,45,45,45,29,45,]),'INTEGER':([22,23,24,26,27,29,30,44,45,46,47,48,49,50,51,52,53,54,55,56,93,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'FLOAT_NUM':([22,23,24,26,27,29,30,44,45,46,47,48,49,50,51,52,53,54,55,56,93,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'STRING_LITERAL':([22,23,24,26,27,29,30,44,45,46,47,48,49,50,51,52,53,54,55,56,93,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'TRUE':([22,23,24,26,27,29,30,44,45,46,47,48,49,50,51,52,53,54,55,56,93,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FALSE':([22,23,24,26,27,29,30,44,45,46,47,48,49,50,51,52,53,54,55,56,93,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'RPAREN':([28,31,32,33,34,35,36,37,38,39,40,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,82,95,],[43,-42,-43,-44,-45,-46,-47,59,60,61,-25,64,-40,-39,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-24,97,]),'PLUS':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[44,-42,-43,-44,-45,-46,-47,44,44,44,44,-40,44,-41,-26,-27,-28,-29,-30,44,44,44,44,44,44,44,44,44,]),'TIMES':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[46,-42,-43,-44,-45,-46,-47,46,46,46,46,-40,46,-41,46,46,-28,-29,-30,46,46,46,46,46,46,46,46,46,]),'DIVIDE':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[47,-42,-43,-44,-45,-46,-47,47,47,47,47,-40,47,-41,47,47,-28,-29,-30,47,47,47,47,47,47,47,47,47,]),'POWER':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[48,-42,-43,-44,-45,-46,-47,48,48,48,48,-40,48,-41,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'EQ':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[49,-42,-43,-44,-45,-46,-47,49,49,49,49,-40,49,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,49,49,49,]),'NE':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[50,-42,-43,-44,-45,-46,-47,50,50,50,50,-40,50,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,50,50,50,]),'LT':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[51,-42,-43,-44,-45,-46,-47,51,51,51,51,-40,51,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,51,51,51,]),'LE':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[52,-42,-43,-44,-45,-46,-47,52,52,52,52,-40,52,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,52,52,52,]),'GT':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[53,-42,-43,-44,-45,-46,-47,53,53,53,53,-40,53,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,53,53,53,]),'GE':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[54,-42,-43,-44,-45,-46,-47,54,54,54,54,-40,54,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,54,54,54,]),'AND':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[55,-42,-43,-44,-45,-46,-47,55,55,55,55,-40,-39,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,55,55,]),'OR':([28,31,32,33,34,35,36,37,38,41,42,57,58,64,66,67,68,69,70,71,72,73,74,75,76,77,78,95,],[56,-42,-43,-44,-45,-46,-47,56,56,56,56,-40,-39,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,56,]),'SEMICOLON':([31,32,33,34,35,36,41,57,58,60,61,64,66,67,68,69,70,71,72,73,74,75,76,77,78,],[-42,-43,-44,-45,-46,-47,63,-40,-39,80,81,-41,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,]),'COMMA':([39,40,82,],[62,-25,-24,]),'LBRACE':([43,59,91,97,],[65,79,94,99,]),'ELIF':([85,87,88,101,],[-48,90,-18,-17,]),'ELSE':([85,87,88,101,],[-48,91,-18,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,65,79,94,99,],[2,83,84,96,100,]),'statement':([0,2,65,79,83,84,94,96,99,100,],[3,20,3,3,20,20,3,20,3,20,]),'assignment_or_declaration':([0,2,65,79,83,84,94,96,99,100,],[4,4,4,4,4,4,4,4,4,4,]),'conditional_statement':([0,2,65,79,83,84,94,96,99,100,],[5,5,5,5,5,5,5,5,5,5,]),'repetition_statement':([0,2,65,79,83,84,94,96,99,100,],[6,6,6,6,6,6,6,6,6,6,]),'print_statement':([0,2,65,79,83,84,94,96,99,100,],[7,7,7,7,7,7,7,7,7,7,]),'read_statement':([0,2,65,79,83,84,94,96,99,100,],[8,8,8,8,8,8,8,8,8,8,]),'optional_type':([0,2,65,79,83,84,94,96,99,100,],[9,9,9,9,9,9,9,9,9,9,]),'empty':([0,2,65,79,83,84,85,87,94,96,99,100,],[19,19,19,19,19,19,88,92,19,19,19,19,]),'expression':([22,23,24,26,27,29,30,44,45,46,47,48,49,50,51,52,53,54,55,56,93,],[28,37,38,41,42,57,58,66,67,68,69,70,71,72,73,74,75,76,77,78,95,]),'identifier_list':([25,],[39,]),'elif_list':([85,],[87,]),'else_optional':([87,],[89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',21),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',26),
  ('statement -> assignment_or_declaration','statement',1,'p_statement','parser.py',34),
  ('statement -> conditional_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> repetition_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',37),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',38),
  ('optional_type -> TYPE_INT','optional_type',1,'p_optional_type','parser.py',43),
  ('optional_type -> TYPE_FLOAT','optional_type',1,'p_optional_type','parser.py',44),
  ('optional_type -> TYPE_STRING','optional_type',1,'p_optional_type','parser.py',45),
  ('optional_type -> TYPE_CHAR','optional_type',1,'p_optional_type','parser.py',46),
  ('optional_type -> TYPE_BOOL','optional_type',1,'p_optional_type','parser.py',47),
  ('optional_type -> empty','optional_type',1,'p_optional_type','parser.py',48),
  ('assignment_or_declaration -> optional_type IDENTIFIER ASSIGN expression SEMICOLON','assignment_or_declaration',5,'p_assignment_or_declaration','parser.py',53),
  ('conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional','conditional_statement',9,'p_conditional_statement','parser.py',58),
  ('elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE','elif_list',8,'p_elif_list','parser.py',62),
  ('elif_list -> empty','elif_list',1,'p_elif_list','parser.py',63),
  ('else_optional -> ELSE LBRACE statement_list RBRACE','else_optional',4,'p_else_optional','parser.py',71),
  ('else_optional -> empty','else_optional',1,'p_else_optional','parser.py',72),
  ('repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','repetition_statement',7,'p_repetition_statement','parser.py',79),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',83),
  ('read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON','read_statement',5,'p_read_statement','parser.py',87),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','parser.py',100),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',101),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',113),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',114),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',115),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',116),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','parser.py',117),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',118),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',119),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',120),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',121),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',122),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',123),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',124),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',125),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',131),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',135),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',139),
  ('expression -> INTEGER','expression',1,'p_expression_value','parser.py',143),
  ('expression -> FLOAT_NUM','expression',1,'p_expression_value','parser.py',144),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_value','parser.py',145),
  ('expression -> IDENTIFIER','expression',1,'p_expression_value','parser.py',146),
  ('expression -> TRUE','expression',1,'p_expression_value','parser.py',147),
  ('expression -> FALSE','expression',1,'p_expression_value','parser.py',148),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',160),
]
