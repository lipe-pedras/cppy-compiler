
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTleftEQNELTLEGTGEleftPLUSMINUSleftTIMESDIVIDErightPOWERrightUMINUSAND ASSIGN COMMA DIVIDE ELIF ELSE EQ FALSE FLOAT_NUM GE GT IDENTIFIER IF INTEGER LBRACE LE LPAREN LT MINUS NE NOT OR PLUS POWER PRINT RBRACE READ RPAREN SEMICOLON STRING_LITERAL TIMES TRUE TYPE_BOOL TYPE_CHAR TYPE_FLOAT TYPE_INT TYPE_STRING WHILEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : declaration\n                 | conditional_statement\n                 | repetition_statement\n                 | print_statement\n                 | read_statementoptional_type : TYPE_INT\n                     | TYPE_FLOAT\n                     | TYPE_STRING\n                     | TYPE_CHAR\n                     | TYPE_BOOL\n                     | emptyoptional_assignment : ASSIGN expression\n                           | emptydeclaration : optional_type IDENTIFIER optional_assignment SEMICOLONconditional_statement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optionalelif_list : elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE\n                 | emptyelse_optional : ELSE LBRACE statement_list RBRACE\n                     | emptyrepetition_statement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEprint_statement : PRINT LPAREN expression RPAREN SEMICOLONread_statement : READ LPAREN identifier_list RPAREN SEMICOLONidentifier_list : identifier_list COMMA IDENTIFIER\n                       | IDENTIFIERexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression POWER expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expressionexpression : NOT expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : INTEGER\n                  | FLOAT_NUM\n                  | STRING_LITERAL\n                  | IDENTIFIER\n                  | TRUE\n                  | FALSEempty :'
    
_lr_action_items = {'IF':([0,2,3,4,5,6,7,8,20,43,67,81,82,83,85,86,87,88,89,90,91,94,96,98,100,101,102,103,],[10,10,-3,-4,-5,-6,-7,-8,-2,-17,10,10,-24,-25,10,10,-50,-23,-50,-20,-18,-22,10,10,-21,10,10,-19,]),'WHILE':([0,2,3,4,5,6,7,8,20,43,67,81,82,83,85,86,87,88,89,90,91,94,96,98,100,101,102,103,],[11,11,-3,-4,-5,-6,-7,-8,-2,-17,11,11,-24,-25,11,11,-50,-23,-50,-20,-18,-22,11,11,-21,11,11,-19,]),'PRINT':([0,2,3,4,5,6,7,8,20,43,67,81,82,83,85,86,87,88,89,90,91,94,96,98,100,101,102,103,],[12,12,-3,-4,-5,-6,-7,-8,-2,-17,12,12,-24,-25,12,12,-50,-23,-50,-20,-18,-22,12,12,-21,12,12,-19,]),'READ':([0,2,3,4,5,6,7,8,20,43,67,81,82,83,85,86,87,88,89,90,91,94,96,98,100,101,102,103,],[13,13,-3,-4,-5,-6,-7,-8,-2,-17,13,13,-24,-25,13,13,-50,-23,-50,-20,-18,-22,13,13,-21,13,13,-19,]),'TYPE_INT':([0,2,3,4,5,6,7,8,20,43,67,81,82,83,85,86,87,88,89,90,91,94,96,98,100,101,102,103,],[14,14,-3,-4,-5,-6,-7,-8,-2,-17,14,14,-24,-25,14,14,-50,-23,-50,-20,-18,-22,14,14,-21,14,14,-19,]),'TYPE_FLOAT':([0,2,3,4,5,6,7,8,20,43,67,81,82,83,85,86,87,88,89,90,91,94,96,98,100,101,102,103,],[15,15,-3,-4,-5,-6,-7,-8,-2,-17,15,15,-24,-25,15,15,-50,-23,-50,-20,-18,-22,15,15,-21,15,15,-19,]),'TYPE_STRING':([0,2,3,4,5,6,7,8,20,43,67,81,82,83,85,86,87,88,89,90,91,94,96,98,100,101,102,103,],[16,16,-3,-4,-5,-6,-7,-8,-2,-17,16,16,-24,-25,16,16,-50,-23,-50,-20,-18,-22,16,16,-21,16,16,-19,]),'TYPE_CHAR':([0,2,3,4,5,6,7,8,20,43,67,81,82,83,85,86,87,88,89,90,91,94,96,98,100,101,102,103,],[17,17,-3,-4,-5,-6,-7,-8,-2,-17,17,17,-24,-25,17,17,-50,-23,-50,-20,-18,-22,17,17,-21,17,17,-19,]),'TYPE_BOOL':([0,2,3,4,5,6,7,8,20,43,67,81,82,83,85,86,87,88,89,90,91,94,96,98,100,101,102,103,],[18,18,-3,-4,-5,-6,-7,-8,-2,-17,18,18,-24,-25,18,18,-50,-23,-50,-20,-18,-22,18,18,-21,18,18,-19,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,14,15,16,17,18,19,20,22,23,24,25,27,29,31,32,43,47,48,49,50,51,52,53,54,55,56,57,58,59,65,67,81,82,83,85,86,87,88,89,90,91,94,95,96,98,100,101,102,103,],[-50,-50,-3,-4,-5,-6,-7,-8,21,-9,-10,-11,-12,-13,-14,-2,36,36,36,42,36,36,36,36,-17,36,36,36,36,36,36,36,36,36,36,36,36,36,84,-50,-50,-24,-25,-50,-50,-50,-23,-50,-20,-18,-22,36,-50,-50,-21,-50,-50,-19,]),'$end':([1,2,3,4,5,6,7,8,20,43,82,83,87,88,89,90,91,94,100,103,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-17,-24,-25,-50,-23,-50,-20,-18,-22,-21,-19,]),'RBRACE':([3,4,5,6,7,8,20,43,82,83,85,86,87,88,89,90,91,94,98,100,102,103,],[-3,-4,-5,-6,-7,-8,-2,-17,-24,-25,87,88,-50,-23,-50,-20,-18,-22,100,-21,103,-19,]),'LPAREN':([10,11,12,13,22,23,24,27,29,31,32,47,48,49,50,51,52,53,54,55,56,57,58,59,92,95,],[22,23,24,25,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,95,29,]),'ASSIGN':([21,],[27,]),'SEMICOLON':([21,26,28,33,34,35,36,37,38,44,60,61,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,80,],[-50,43,-16,-44,-45,-46,-47,-48,-49,-15,-42,-41,82,83,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,]),'NOT':([22,23,24,27,29,31,32,47,48,49,50,51,52,53,54,55,56,57,58,59,95,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'MINUS':([22,23,24,27,29,30,31,32,33,34,35,36,37,38,39,40,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,95,97,],[31,31,31,31,31,48,31,31,-44,-45,-46,-47,-48,-49,48,48,48,48,31,31,31,31,31,31,31,31,31,31,31,31,31,-42,48,-43,-28,-29,-30,-31,-32,48,48,48,48,48,48,48,48,31,48,]),'INTEGER':([22,23,24,27,29,31,32,47,48,49,50,51,52,53,54,55,56,57,58,59,95,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'FLOAT_NUM':([22,23,24,27,29,31,32,47,48,49,50,51,52,53,54,55,56,57,58,59,95,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'STRING_LITERAL':([22,23,24,27,29,31,32,47,48,49,50,51,52,53,54,55,56,57,58,59,95,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'TRUE':([22,23,24,27,29,31,32,47,48,49,50,51,52,53,54,55,56,57,58,59,95,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FALSE':([22,23,24,27,29,31,32,47,48,49,50,51,52,53,54,55,56,57,58,59,95,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'RPAREN':([30,33,34,35,36,37,38,39,40,41,42,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,84,97,],[46,-44,-45,-46,-47,-48,-49,62,63,64,-27,66,-42,-41,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-26,99,]),'PLUS':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[47,-44,-45,-46,-47,-48,-49,47,47,47,47,-42,47,-43,-28,-29,-30,-31,-32,47,47,47,47,47,47,47,47,47,]),'TIMES':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[49,-44,-45,-46,-47,-48,-49,49,49,49,49,-42,49,-43,49,49,-30,-31,-32,49,49,49,49,49,49,49,49,49,]),'DIVIDE':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[50,-44,-45,-46,-47,-48,-49,50,50,50,50,-42,50,-43,50,50,-30,-31,-32,50,50,50,50,50,50,50,50,50,]),'POWER':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[51,-44,-45,-46,-47,-48,-49,51,51,51,51,-42,51,-43,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'EQ':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[52,-44,-45,-46,-47,-48,-49,52,52,52,52,-42,52,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,52,52,52,]),'NE':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[53,-44,-45,-46,-47,-48,-49,53,53,53,53,-42,53,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,53,53,53,]),'LT':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[54,-44,-45,-46,-47,-48,-49,54,54,54,54,-42,54,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,54,54,54,]),'LE':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[55,-44,-45,-46,-47,-48,-49,55,55,55,55,-42,55,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,55,55,55,]),'GT':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[56,-44,-45,-46,-47,-48,-49,56,56,56,56,-42,56,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,56,56,56,]),'GE':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[57,-44,-45,-46,-47,-48,-49,57,57,57,57,-42,57,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,57,57,57,]),'AND':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[58,-44,-45,-46,-47,-48,-49,58,58,58,58,-42,-41,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,58,58,]),'OR':([30,33,34,35,36,37,38,39,40,44,45,60,61,66,68,69,70,71,72,73,74,75,76,77,78,79,80,97,],[59,-44,-45,-46,-47,-48,-49,59,59,59,59,-42,-41,-43,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,59,]),'COMMA':([41,42,84,],[65,-27,-26,]),'LBRACE':([46,62,93,99,],[67,81,96,101,]),'ELIF':([87,89,90,103,],[-50,92,-20,-19,]),'ELSE':([87,89,90,103,],[-50,93,-20,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,67,81,96,101,],[2,85,86,98,102,]),'statement':([0,2,67,81,85,86,96,98,101,102,],[3,20,3,3,20,20,3,20,3,20,]),'declaration':([0,2,67,81,85,86,96,98,101,102,],[4,4,4,4,4,4,4,4,4,4,]),'conditional_statement':([0,2,67,81,85,86,96,98,101,102,],[5,5,5,5,5,5,5,5,5,5,]),'repetition_statement':([0,2,67,81,85,86,96,98,101,102,],[6,6,6,6,6,6,6,6,6,6,]),'print_statement':([0,2,67,81,85,86,96,98,101,102,],[7,7,7,7,7,7,7,7,7,7,]),'read_statement':([0,2,67,81,85,86,96,98,101,102,],[8,8,8,8,8,8,8,8,8,8,]),'optional_type':([0,2,67,81,85,86,96,98,101,102,],[9,9,9,9,9,9,9,9,9,9,]),'empty':([0,2,21,67,81,85,86,87,89,96,98,101,102,],[19,19,28,19,19,19,19,90,94,19,19,19,19,]),'optional_assignment':([21,],[26,]),'expression':([22,23,24,27,29,31,32,47,48,49,50,51,52,53,54,55,56,57,58,59,95,],[30,39,40,44,45,60,61,68,69,70,71,72,73,74,75,76,77,78,79,80,97,]),'identifier_list':([25,],[41,]),'elif_list':([87,],[89,]),'else_optional':([89,],[91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',24),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',28),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',29),
  ('statement -> declaration','statement',1,'p_statement','parser.py',37),
  ('statement -> conditional_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> repetition_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',41),
  ('optional_type -> TYPE_INT','optional_type',1,'p_optional_type','parser.py',46),
  ('optional_type -> TYPE_FLOAT','optional_type',1,'p_optional_type','parser.py',47),
  ('optional_type -> TYPE_STRING','optional_type',1,'p_optional_type','parser.py',48),
  ('optional_type -> TYPE_CHAR','optional_type',1,'p_optional_type','parser.py',49),
  ('optional_type -> TYPE_BOOL','optional_type',1,'p_optional_type','parser.py',50),
  ('optional_type -> empty','optional_type',1,'p_optional_type','parser.py',51),
  ('optional_assignment -> ASSIGN expression','optional_assignment',2,'p_optional_assignment','parser.py',60),
  ('optional_assignment -> empty','optional_assignment',1,'p_optional_assignment','parser.py',61),
  ('declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON','declaration',4,'p_declaration','parser.py',69),
  ('conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional','conditional_statement',9,'p_conditional_statement','parser.py',83),
  ('elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE','elif_list',8,'p_elif_list','parser.py',87),
  ('elif_list -> empty','elif_list',1,'p_elif_list','parser.py',88),
  ('else_optional -> ELSE LBRACE statement_list RBRACE','else_optional',4,'p_else_optional','parser.py',96),
  ('else_optional -> empty','else_optional',1,'p_else_optional','parser.py',97),
  ('repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','repetition_statement',7,'p_repetition_statement','parser.py',104),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',108),
  ('read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON','read_statement',5,'p_read_statement','parser.py',113),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','parser.py',130),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',131),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',139),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',140),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',141),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',142),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','parser.py',143),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',144),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',145),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',146),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',147),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',148),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',149),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',150),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',151),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',157),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',161),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',165),
  ('expression -> INTEGER','expression',1,'p_expression_value','parser.py',169),
  ('expression -> FLOAT_NUM','expression',1,'p_expression_value','parser.py',170),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_value','parser.py',171),
  ('expression -> IDENTIFIER','expression',1,'p_expression_value','parser.py',172),
  ('expression -> TRUE','expression',1,'p_expression_value','parser.py',173),
  ('expression -> FALSE','expression',1,'p_expression_value','parser.py',174),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',186),
]
