
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTleftEQNELTLEGTGEleftPLUSMINUSleftTIMESDIVIDErightPOWERrightUMINUSAND ASSIGN DIVIDE ELIF ELSE EQ FALSE FLOAT_NUM GE GT IDENTIFIER IF INTEGER LBRACE LE LPAREN LT MINUS NE NOT OR PLUS POWER PRINT RBRACE RPAREN SEMICOLON STRING_LITERAL TIMES TRUE TYPE_BOOL TYPE_CHAR TYPE_FLOAT TYPE_INT TYPE_STRING WHILEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : assignment_or_declaration\n                 | conditional_statement\n                 | repetition_statement\n                 | print_statementoptional_type : TYPE_INT\n                     | TYPE_FLOAT\n                     | TYPE_STRING\n                     | TYPE_CHAR\n                     | TYPE_BOOL\n                     | emptyassignment_or_declaration : optional_type IDENTIFIER ASSIGN expression SEMICOLONconditional_statement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optionalelif_list : elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE\n                 | emptyelse_optional : ELSE LBRACE statement_list RBRACE\n                     | emptyrepetition_statement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEprint_statement : PRINT LPAREN expression RPAREN SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression POWER expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expressionexpression : NOT expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : INTEGER\n                  | FLOAT_NUM\n                  | STRING_LITERAL\n                  | IDENTIFIER\n                  | TRUE\n                  | FALSEempty :'
    
_lr_action_items = {'IF':([0,2,3,4,5,6,7,18,56,58,72,73,74,75,76,77,78,79,80,83,85,87,89,90,91,92,],[9,9,-3,-4,-5,-6,-7,-2,-14,9,9,-21,9,9,-44,-20,-44,-17,-15,-19,9,9,-18,9,9,-16,]),'WHILE':([0,2,3,4,5,6,7,18,56,58,72,73,74,75,76,77,78,79,80,83,85,87,89,90,91,92,],[10,10,-3,-4,-5,-6,-7,-2,-14,10,10,-21,10,10,-44,-20,-44,-17,-15,-19,10,10,-18,10,10,-16,]),'PRINT':([0,2,3,4,5,6,7,18,56,58,72,73,74,75,76,77,78,79,80,83,85,87,89,90,91,92,],[11,11,-3,-4,-5,-6,-7,-2,-14,11,11,-21,11,11,-44,-20,-44,-17,-15,-19,11,11,-18,11,11,-16,]),'TYPE_INT':([0,2,3,4,5,6,7,18,56,58,72,73,74,75,76,77,78,79,80,83,85,87,89,90,91,92,],[12,12,-3,-4,-5,-6,-7,-2,-14,12,12,-21,12,12,-44,-20,-44,-17,-15,-19,12,12,-18,12,12,-16,]),'TYPE_FLOAT':([0,2,3,4,5,6,7,18,56,58,72,73,74,75,76,77,78,79,80,83,85,87,89,90,91,92,],[13,13,-3,-4,-5,-6,-7,-2,-14,13,13,-21,13,13,-44,-20,-44,-17,-15,-19,13,13,-18,13,13,-16,]),'TYPE_STRING':([0,2,3,4,5,6,7,18,56,58,72,73,74,75,76,77,78,79,80,83,85,87,89,90,91,92,],[14,14,-3,-4,-5,-6,-7,-2,-14,14,14,-21,14,14,-44,-20,-44,-17,-15,-19,14,14,-18,14,14,-16,]),'TYPE_CHAR':([0,2,3,4,5,6,7,18,56,58,72,73,74,75,76,77,78,79,80,83,85,87,89,90,91,92,],[15,15,-3,-4,-5,-6,-7,-2,-14,15,15,-21,15,15,-44,-20,-44,-17,-15,-19,15,15,-18,15,15,-16,]),'TYPE_BOOL':([0,2,3,4,5,6,7,18,56,58,72,73,74,75,76,77,78,79,80,83,85,87,89,90,91,92,],[16,16,-3,-4,-5,-6,-7,-2,-14,16,16,-21,16,16,-44,-20,-44,-17,-15,-19,16,16,-18,16,16,-16,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,12,13,14,15,16,17,18,20,21,22,23,24,26,27,39,40,41,42,43,44,45,46,47,48,49,50,51,56,58,72,73,74,75,76,77,78,79,80,83,84,85,87,89,90,91,92,],[-44,-44,-3,-4,-5,-6,-7,19,-8,-9,-10,-11,-12,-13,-2,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-14,-44,-44,-21,-44,-44,-44,-20,-44,-17,-15,-19,31,-44,-44,-18,-44,-44,-16,]),'$end':([1,2,3,4,5,6,7,18,56,73,76,77,78,79,80,83,89,92,],[0,-1,-3,-4,-5,-6,-7,-2,-14,-21,-44,-20,-44,-17,-15,-19,-18,-16,]),'RBRACE':([3,4,5,6,7,18,56,73,74,75,76,77,78,79,80,83,87,89,91,92,],[-3,-4,-5,-6,-7,-2,-14,-21,76,77,-44,-20,-44,-17,-15,-19,89,-18,92,-16,]),'LPAREN':([9,10,11,20,21,22,23,24,26,27,39,40,41,42,43,44,45,46,47,48,49,50,51,81,84,],[20,21,22,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,84,24,]),'ASSIGN':([19,],[23,]),'NOT':([20,21,22,23,24,26,27,39,40,41,42,43,44,45,46,47,48,49,50,51,84,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MINUS':([20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,84,86,],[26,26,26,26,26,40,26,26,-38,-39,-40,-41,-42,-43,40,40,40,40,26,26,26,26,26,26,26,26,26,26,26,26,26,-36,40,-37,-22,-23,-24,-25,-26,40,40,40,40,40,40,40,40,26,40,]),'INTEGER':([20,21,22,23,24,26,27,39,40,41,42,43,44,45,46,47,48,49,50,51,84,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'FLOAT_NUM':([20,21,22,23,24,26,27,39,40,41,42,43,44,45,46,47,48,49,50,51,84,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'STRING_LITERAL':([20,21,22,23,24,26,27,39,40,41,42,43,44,45,46,47,48,49,50,51,84,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'TRUE':([20,21,22,23,24,26,27,39,40,41,42,43,44,45,46,47,48,49,50,51,84,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FALSE':([20,21,22,23,24,26,27,39,40,41,42,43,44,45,46,47,48,49,50,51,84,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'RPAREN':([25,28,29,30,31,32,33,34,35,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[38,-38,-39,-40,-41,-42,-43,54,55,57,-36,-35,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,88,]),'PLUS':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[39,-38,-39,-40,-41,-42,-43,39,39,39,39,-36,39,-37,-22,-23,-24,-25,-26,39,39,39,39,39,39,39,39,39,]),'TIMES':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[41,-38,-39,-40,-41,-42,-43,41,41,41,41,-36,41,-37,41,41,-24,-25,-26,41,41,41,41,41,41,41,41,41,]),'DIVIDE':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[42,-38,-39,-40,-41,-42,-43,42,42,42,42,-36,42,-37,42,42,-24,-25,-26,42,42,42,42,42,42,42,42,42,]),'POWER':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[43,-38,-39,-40,-41,-42,-43,43,43,43,43,-36,43,-37,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'EQ':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[44,-38,-39,-40,-41,-42,-43,44,44,44,44,-36,44,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,44,44,44,]),'NE':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[45,-38,-39,-40,-41,-42,-43,45,45,45,45,-36,45,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,45,45,45,]),'LT':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[46,-38,-39,-40,-41,-42,-43,46,46,46,46,-36,46,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,46,46,46,]),'LE':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[47,-38,-39,-40,-41,-42,-43,47,47,47,47,-36,47,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,47,47,47,]),'GT':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[48,-38,-39,-40,-41,-42,-43,48,48,48,48,-36,48,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,48,48,48,]),'GE':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[49,-38,-39,-40,-41,-42,-43,49,49,49,49,-36,49,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,49,49,49,]),'AND':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[50,-38,-39,-40,-41,-42,-43,50,50,50,50,-36,-35,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,50,50,]),'OR':([25,28,29,30,31,32,33,34,35,36,37,52,53,57,59,60,61,62,63,64,65,66,67,68,69,70,71,86,],[51,-38,-39,-40,-41,-42,-43,51,51,51,51,-36,-35,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,51,]),'SEMICOLON':([28,29,30,31,32,33,36,52,53,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,],[-38,-39,-40,-41,-42,-43,56,-36,-35,73,-37,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,]),'LBRACE':([38,54,82,88,],[58,72,85,90,]),'ELIF':([76,78,79,92,],[-44,81,-17,-16,]),'ELSE':([76,78,79,92,],[-44,82,-17,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,58,72,85,90,],[2,74,75,87,91,]),'statement':([0,2,58,72,74,75,85,87,90,91,],[3,18,3,3,18,18,3,18,3,18,]),'assignment_or_declaration':([0,2,58,72,74,75,85,87,90,91,],[4,4,4,4,4,4,4,4,4,4,]),'conditional_statement':([0,2,58,72,74,75,85,87,90,91,],[5,5,5,5,5,5,5,5,5,5,]),'repetition_statement':([0,2,58,72,74,75,85,87,90,91,],[6,6,6,6,6,6,6,6,6,6,]),'print_statement':([0,2,58,72,74,75,85,87,90,91,],[7,7,7,7,7,7,7,7,7,7,]),'optional_type':([0,2,58,72,74,75,85,87,90,91,],[8,8,8,8,8,8,8,8,8,8,]),'empty':([0,2,58,72,74,75,76,78,85,87,90,91,],[17,17,17,17,17,17,79,83,17,17,17,17,]),'expression':([20,21,22,23,24,26,27,39,40,41,42,43,44,45,46,47,48,49,50,51,84,],[25,34,35,36,37,52,53,59,60,61,62,63,64,65,66,67,68,69,70,71,86,]),'elif_list':([76,],[78,]),'else_optional':([78,],[80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',21),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',25),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',26),
  ('statement -> assignment_or_declaration','statement',1,'p_statement','parser.py',34),
  ('statement -> conditional_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> repetition_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',37),
  ('optional_type -> TYPE_INT','optional_type',1,'p_optional_type','parser.py',42),
  ('optional_type -> TYPE_FLOAT','optional_type',1,'p_optional_type','parser.py',43),
  ('optional_type -> TYPE_STRING','optional_type',1,'p_optional_type','parser.py',44),
  ('optional_type -> TYPE_CHAR','optional_type',1,'p_optional_type','parser.py',45),
  ('optional_type -> TYPE_BOOL','optional_type',1,'p_optional_type','parser.py',46),
  ('optional_type -> empty','optional_type',1,'p_optional_type','parser.py',47),
  ('assignment_or_declaration -> optional_type IDENTIFIER ASSIGN expression SEMICOLON','assignment_or_declaration',5,'p_assignment_or_declaration','parser.py',52),
  ('conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional','conditional_statement',9,'p_conditional_statement','parser.py',57),
  ('elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE','elif_list',8,'p_elif_list','parser.py',61),
  ('elif_list -> empty','elif_list',1,'p_elif_list','parser.py',62),
  ('else_optional -> ELSE LBRACE statement_list RBRACE','else_optional',4,'p_else_optional','parser.py',70),
  ('else_optional -> empty','else_optional',1,'p_else_optional','parser.py',71),
  ('repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','repetition_statement',7,'p_repetition_statement','parser.py',78),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',82),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',86),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',87),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',88),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',89),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','parser.py',90),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',91),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',92),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',93),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',94),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',95),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',96),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',97),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',98),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',104),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',108),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',112),
  ('expression -> INTEGER','expression',1,'p_expression_value','parser.py',116),
  ('expression -> FLOAT_NUM','expression',1,'p_expression_value','parser.py',117),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_value','parser.py',118),
  ('expression -> IDENTIFIER','expression',1,'p_expression_value','parser.py',119),
  ('expression -> TRUE','expression',1,'p_expression_value','parser.py',120),
  ('expression -> FALSE','expression',1,'p_expression_value','parser.py',121),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',133),
]
