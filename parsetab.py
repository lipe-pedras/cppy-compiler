
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNOTleftEQNELTLEGTGEleftPLUSMINUSleftTIMESDIVIDErightPOWERrightUMINUSAND ASSIGN COMMA DIVIDE ELIF ELSE EQ FALSE FLOAT_NUM GE GT IDENTIFIER IF INTEGER LBRACE LE LPAREN LT MINUS NE NOT OR PLUS POWER PRINT RBRACE READ RPAREN SEMICOLON STRING_LITERAL TIMES TRUE TYPE_BOOL TYPE_CHAR TYPE_FLOAT TYPE_INT TYPE_STRING WHILEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : declaration\n                 | conditional_statement\n                 | repetition_statement\n                 | print_statement\n                 | read_statementoptional_type : TYPE_INT\n                     | TYPE_FLOAT\n                     | TYPE_STRING\n                     | TYPE_CHAR\n                     | TYPE_BOOL\n                     | emptyoptional_assignment : ASSIGN expression\n                           | emptydeclaration : optional_type IDENTIFIER optional_assignment SEMICOLONconditional_statement : IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optionalelif_list : elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE\n                 | emptyelse_optional : ELSE LBRACE statement_list RBRACE\n                     | emptyrepetition_statement : WHILE LPAREN expression RPAREN LBRACE statement_list RBRACEprint_statement : PRINT LPAREN expression_list RPAREN SEMICOLONexpression_list : expression_list COMMA expression\n                       | expressionread_statement : READ LPAREN identifier_list RPAREN SEMICOLONidentifier_list : identifier_list COMMA IDENTIFIER\n                       | IDENTIFIERexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression POWER expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expressionexpression : NOT expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : INTEGER\n                  | FLOAT_NUM\n                  | STRING_LITERAL\n                  | IDENTIFIER\n                  | TRUE\n                  | FALSEempty :'
    
_lr_action_items = {'IF':([0,2,3,4,5,6,7,8,20,44,69,83,84,86,88,89,90,91,92,93,94,97,99,101,103,104,105,106,],[10,10,-3,-4,-5,-6,-7,-8,-2,-17,10,10,-24,-27,10,10,-52,-23,-52,-20,-18,-22,10,10,-21,10,10,-19,]),'WHILE':([0,2,3,4,5,6,7,8,20,44,69,83,84,86,88,89,90,91,92,93,94,97,99,101,103,104,105,106,],[11,11,-3,-4,-5,-6,-7,-8,-2,-17,11,11,-24,-27,11,11,-52,-23,-52,-20,-18,-22,11,11,-21,11,11,-19,]),'PRINT':([0,2,3,4,5,6,7,8,20,44,69,83,84,86,88,89,90,91,92,93,94,97,99,101,103,104,105,106,],[12,12,-3,-4,-5,-6,-7,-8,-2,-17,12,12,-24,-27,12,12,-52,-23,-52,-20,-18,-22,12,12,-21,12,12,-19,]),'READ':([0,2,3,4,5,6,7,8,20,44,69,83,84,86,88,89,90,91,92,93,94,97,99,101,103,104,105,106,],[13,13,-3,-4,-5,-6,-7,-8,-2,-17,13,13,-24,-27,13,13,-52,-23,-52,-20,-18,-22,13,13,-21,13,13,-19,]),'TYPE_INT':([0,2,3,4,5,6,7,8,20,44,69,83,84,86,88,89,90,91,92,93,94,97,99,101,103,104,105,106,],[14,14,-3,-4,-5,-6,-7,-8,-2,-17,14,14,-24,-27,14,14,-52,-23,-52,-20,-18,-22,14,14,-21,14,14,-19,]),'TYPE_FLOAT':([0,2,3,4,5,6,7,8,20,44,69,83,84,86,88,89,90,91,92,93,94,97,99,101,103,104,105,106,],[15,15,-3,-4,-5,-6,-7,-8,-2,-17,15,15,-24,-27,15,15,-52,-23,-52,-20,-18,-22,15,15,-21,15,15,-19,]),'TYPE_STRING':([0,2,3,4,5,6,7,8,20,44,69,83,84,86,88,89,90,91,92,93,94,97,99,101,103,104,105,106,],[16,16,-3,-4,-5,-6,-7,-8,-2,-17,16,16,-24,-27,16,16,-52,-23,-52,-20,-18,-22,16,16,-21,16,16,-19,]),'TYPE_CHAR':([0,2,3,4,5,6,7,8,20,44,69,83,84,86,88,89,90,91,92,93,94,97,99,101,103,104,105,106,],[17,17,-3,-4,-5,-6,-7,-8,-2,-17,17,17,-24,-27,17,17,-52,-23,-52,-20,-18,-22,17,17,-21,17,17,-19,]),'TYPE_BOOL':([0,2,3,4,5,6,7,8,20,44,69,83,84,86,88,89,90,91,92,93,94,97,99,101,103,104,105,106,],[18,18,-3,-4,-5,-6,-7,-8,-2,-17,18,18,-24,-27,18,18,-52,-23,-52,-20,-18,-22,18,18,-21,18,18,-19,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,14,15,16,17,18,19,20,22,23,24,25,27,29,31,32,44,48,49,50,51,52,53,54,55,56,57,58,59,60,65,67,69,83,84,86,88,89,90,91,92,93,94,97,98,99,101,103,104,105,106,],[-52,-52,-3,-4,-5,-6,-7,-8,21,-9,-10,-11,-12,-13,-14,-2,36,36,36,43,36,36,36,36,-17,36,36,36,36,36,36,36,36,36,36,36,36,36,36,87,-52,-52,-24,-27,-52,-52,-52,-23,-52,-20,-18,-22,36,-52,-52,-21,-52,-52,-19,]),'$end':([1,2,3,4,5,6,7,8,20,44,84,86,90,91,92,93,94,97,103,106,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-17,-24,-27,-52,-23,-52,-20,-18,-22,-21,-19,]),'RBRACE':([3,4,5,6,7,8,20,44,84,86,88,89,90,91,92,93,94,97,101,103,105,106,],[-3,-4,-5,-6,-7,-8,-2,-17,-24,-27,90,91,-52,-23,-52,-20,-18,-22,103,-21,106,-19,]),'LPAREN':([10,11,12,13,22,23,24,27,29,31,32,48,49,50,51,52,53,54,55,56,57,58,59,60,65,95,98,],[22,23,24,25,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,98,29,]),'ASSIGN':([21,],[27,]),'SEMICOLON':([21,26,28,33,34,35,36,37,38,45,61,62,64,66,68,70,71,72,73,74,75,76,77,78,79,80,81,82,],[-52,44,-16,-46,-47,-48,-49,-50,-51,-15,-44,-43,84,86,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,]),'NOT':([22,23,24,27,29,31,32,48,49,50,51,52,53,54,55,56,57,58,59,60,65,98,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'MINUS':([22,23,24,27,29,30,31,32,33,34,35,36,37,38,39,41,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,98,100,],[31,31,31,31,31,49,31,31,-46,-47,-48,-49,-50,-51,49,49,49,49,31,31,31,31,31,31,31,31,31,31,31,31,31,-44,49,31,-45,-30,-31,-32,-33,-34,49,49,49,49,49,49,49,49,49,31,49,]),'INTEGER':([22,23,24,27,29,31,32,48,49,50,51,52,53,54,55,56,57,58,59,60,65,98,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'FLOAT_NUM':([22,23,24,27,29,31,32,48,49,50,51,52,53,54,55,56,57,58,59,60,65,98,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'STRING_LITERAL':([22,23,24,27,29,31,32,48,49,50,51,52,53,54,55,56,57,58,59,60,65,98,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'TRUE':([22,23,24,27,29,31,32,48,49,50,51,52,53,54,55,56,57,58,59,60,65,98,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FALSE':([22,23,24,27,29,31,32,48,49,50,51,52,53,54,55,56,57,58,59,60,65,98,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'RPAREN':([30,33,34,35,36,37,38,39,40,41,42,43,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,87,100,],[47,-46,-47,-48,-49,-50,-51,63,64,-26,66,-29,68,-44,-43,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-25,-28,102,]),'PLUS':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[48,-46,-47,-48,-49,-50,-51,48,48,48,48,-44,48,-45,-30,-31,-32,-33,-34,48,48,48,48,48,48,48,48,48,48,]),'TIMES':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[50,-46,-47,-48,-49,-50,-51,50,50,50,50,-44,50,-45,50,50,-32,-33,-34,50,50,50,50,50,50,50,50,50,50,]),'DIVIDE':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[51,-46,-47,-48,-49,-50,-51,51,51,51,51,-44,51,-45,51,51,-32,-33,-34,51,51,51,51,51,51,51,51,51,51,]),'POWER':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[52,-46,-47,-48,-49,-50,-51,52,52,52,52,-44,52,-45,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'EQ':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[53,-46,-47,-48,-49,-50,-51,53,53,53,53,-44,53,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,53,53,53,53,]),'NE':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[54,-46,-47,-48,-49,-50,-51,54,54,54,54,-44,54,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,54,54,54,54,]),'LT':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[55,-46,-47,-48,-49,-50,-51,55,55,55,55,-44,55,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,55,55,55,55,]),'LE':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[56,-46,-47,-48,-49,-50,-51,56,56,56,56,-44,56,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,56,56,56,56,]),'GT':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[57,-46,-47,-48,-49,-50,-51,57,57,57,57,-44,57,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,57,57,57,57,]),'GE':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[58,-46,-47,-48,-49,-50,-51,58,58,58,58,-44,58,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,58,58,58,58,]),'AND':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[59,-46,-47,-48,-49,-50,-51,59,59,59,59,-44,-43,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,59,59,59,]),'OR':([30,33,34,35,36,37,38,39,41,45,46,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,],[60,-46,-47,-48,-49,-50,-51,60,60,60,60,-44,-43,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,60,60,]),'COMMA':([33,34,35,36,37,38,40,41,42,43,61,62,68,70,71,72,73,74,75,76,77,78,79,80,81,82,85,87,],[-46,-47,-48,-49,-50,-51,65,-26,67,-29,-44,-43,-45,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-25,-28,]),'LBRACE':([47,63,96,102,],[69,83,99,104,]),'ELIF':([90,92,93,106,],[-52,95,-20,-19,]),'ELSE':([90,92,93,106,],[-52,96,-20,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,69,83,99,104,],[2,88,89,101,105,]),'statement':([0,2,69,83,88,89,99,101,104,105,],[3,20,3,3,20,20,3,20,3,20,]),'declaration':([0,2,69,83,88,89,99,101,104,105,],[4,4,4,4,4,4,4,4,4,4,]),'conditional_statement':([0,2,69,83,88,89,99,101,104,105,],[5,5,5,5,5,5,5,5,5,5,]),'repetition_statement':([0,2,69,83,88,89,99,101,104,105,],[6,6,6,6,6,6,6,6,6,6,]),'print_statement':([0,2,69,83,88,89,99,101,104,105,],[7,7,7,7,7,7,7,7,7,7,]),'read_statement':([0,2,69,83,88,89,99,101,104,105,],[8,8,8,8,8,8,8,8,8,8,]),'optional_type':([0,2,69,83,88,89,99,101,104,105,],[9,9,9,9,9,9,9,9,9,9,]),'empty':([0,2,21,69,83,88,89,90,92,99,101,104,105,],[19,19,28,19,19,19,19,93,97,19,19,19,19,]),'optional_assignment':([21,],[26,]),'expression':([22,23,24,27,29,31,32,48,49,50,51,52,53,54,55,56,57,58,59,60,65,98,],[30,39,41,45,46,61,62,70,71,72,73,74,75,76,77,78,79,80,81,82,85,100,]),'expression_list':([24,],[40,]),'identifier_list':([25,],[42,]),'elif_list':([90,],[92,]),'else_optional':([92,],[94,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',24),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',28),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',29),
  ('statement -> declaration','statement',1,'p_statement','parser.py',37),
  ('statement -> conditional_statement','statement',1,'p_statement','parser.py',38),
  ('statement -> repetition_statement','statement',1,'p_statement','parser.py',39),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',40),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',41),
  ('optional_type -> TYPE_INT','optional_type',1,'p_optional_type','parser.py',46),
  ('optional_type -> TYPE_FLOAT','optional_type',1,'p_optional_type','parser.py',47),
  ('optional_type -> TYPE_STRING','optional_type',1,'p_optional_type','parser.py',48),
  ('optional_type -> TYPE_CHAR','optional_type',1,'p_optional_type','parser.py',49),
  ('optional_type -> TYPE_BOOL','optional_type',1,'p_optional_type','parser.py',50),
  ('optional_type -> empty','optional_type',1,'p_optional_type','parser.py',51),
  ('optional_assignment -> ASSIGN expression','optional_assignment',2,'p_optional_assignment','parser.py',60),
  ('optional_assignment -> empty','optional_assignment',1,'p_optional_assignment','parser.py',61),
  ('declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON','declaration',4,'p_declaration','parser.py',69),
  ('conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional','conditional_statement',9,'p_conditional_statement','parser.py',83),
  ('elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE','elif_list',8,'p_elif_list','parser.py',87),
  ('elif_list -> empty','elif_list',1,'p_elif_list','parser.py',88),
  ('else_optional -> ELSE LBRACE statement_list RBRACE','else_optional',4,'p_else_optional','parser.py',96),
  ('else_optional -> empty','else_optional',1,'p_else_optional','parser.py',97),
  ('repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE','repetition_statement',7,'p_repetition_statement','parser.py',104),
  ('print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON','print_statement',5,'p_print_statement','parser.py',108),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',115),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',116),
  ('read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON','read_statement',5,'p_read_statement','parser.py',126),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','parser.py',142),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','parser.py',143),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',151),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',152),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',153),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',154),
  ('expression -> expression POWER expression','expression',3,'p_expression_binop','parser.py',155),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',156),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',157),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',158),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',159),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',160),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',161),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',162),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',163),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',169),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',173),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',177),
  ('expression -> INTEGER','expression',1,'p_expression_value','parser.py',181),
  ('expression -> FLOAT_NUM','expression',1,'p_expression_value','parser.py',182),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_value','parser.py',183),
  ('expression -> IDENTIFIER','expression',1,'p_expression_value','parser.py',184),
  ('expression -> TRUE','expression',1,'p_expression_value','parser.py',185),
  ('expression -> FALSE','expression',1,'p_expression_value','parser.py',186),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',198),
]
