Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> declaration
Rule 5     statement -> conditional_statement
Rule 6     statement -> repetition_statement
Rule 7     statement -> print_statement
Rule 8     statement -> read_statement
Rule 9     optional_type -> TYPE_INT
Rule 10    optional_type -> TYPE_FLOAT
Rule 11    optional_type -> TYPE_STRING
Rule 12    optional_type -> TYPE_CHAR
Rule 13    optional_type -> TYPE_BOOL
Rule 14    optional_type -> empty
Rule 15    optional_assignment -> ASSIGN expression
Rule 16    optional_assignment -> empty
Rule 17    declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON
Rule 18    conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
Rule 19    elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 20    elif_list -> empty
Rule 21    else_optional -> ELSE LBRACE statement_list RBRACE
Rule 22    else_optional -> empty
Rule 23    repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
Rule 24    print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON
Rule 25    expression_list -> expression_list COMMA expression
Rule 26    expression_list -> expression
Rule 27    read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON
Rule 28    identifier_list -> identifier_list COMMA IDENTIFIER
Rule 29    identifier_list -> IDENTIFIER
Rule 30    expression -> expression PLUS expression
Rule 31    expression -> expression MINUS expression
Rule 32    expression -> expression TIMES expression
Rule 33    expression -> expression DIVIDE expression
Rule 34    expression -> expression POWER expression
Rule 35    expression -> expression EQ expression
Rule 36    expression -> expression NE expression
Rule 37    expression -> expression LT expression
Rule 38    expression -> expression LE expression
Rule 39    expression -> expression GT expression
Rule 40    expression -> expression GE expression
Rule 41    expression -> expression AND expression
Rule 42    expression -> expression OR expression
Rule 43    expression -> NOT expression
Rule 44    expression -> MINUS expression
Rule 45    expression -> LPAREN expression RPAREN
Rule 46    expression -> INTEGER
Rule 47    expression -> FLOAT_NUM
Rule 48    expression -> STRING_LITERAL
Rule 49    expression -> IDENTIFIER
Rule 50    expression -> TRUE
Rule 51    expression -> FALSE
Rule 52    empty -> <empty>

Terminals, with rules where they appear

AND                  : 41
ASSIGN               : 15
COMMA                : 25 28
DIVIDE               : 33
ELIF                 : 19
ELSE                 : 21
EQ                   : 35
FALSE                : 51
FLOAT_NUM            : 47
GE                   : 40
GT                   : 39
IDENTIFIER           : 17 28 29 49
IF                   : 18
INTEGER              : 46
LBRACE               : 18 19 21 23
LE                   : 38
LPAREN               : 18 19 23 24 27 45
LT                   : 37
MINUS                : 31 44
NE                   : 36
NOT                  : 43
OR                   : 42
PLUS                 : 30
POWER                : 34
PRINT                : 24
RBRACE               : 18 19 21 23
READ                 : 27
RPAREN               : 18 19 23 24 27 45
SEMICOLON            : 17 24 27
STRING_LITERAL       : 48
TIMES                : 32
TRUE                 : 50
TYPE_BOOL            : 13
TYPE_CHAR            : 12
TYPE_FLOAT           : 10
TYPE_INT             : 9
TYPE_STRING          : 11
WHILE                : 23
error                : 

Nonterminals, with rules where they appear

conditional_statement : 5
declaration          : 4
elif_list            : 18 19
else_optional        : 18
empty                : 14 16 20 22
expression           : 15 18 19 23 25 26 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 44 45
expression_list      : 24 25
identifier_list      : 27 28
optional_assignment  : 17
optional_type        : 17
print_statement      : 7
program              : 0
read_statement       : 8
repetition_statement : 6
statement            : 2 3
statement_list       : 1 2 18 19 21 23

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    $end            reduce using rule 1 (program -> statement_list .)
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    statement                      shift and go to state 20
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 3

    (3) statement_list -> statement .

    IF              reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    PRINT           reduce using rule 3 (statement_list -> statement .)
    READ            reduce using rule 3 (statement_list -> statement .)
    TYPE_INT        reduce using rule 3 (statement_list -> statement .)
    TYPE_FLOAT      reduce using rule 3 (statement_list -> statement .)
    TYPE_STRING     reduce using rule 3 (statement_list -> statement .)
    TYPE_CHAR       reduce using rule 3 (statement_list -> statement .)
    TYPE_BOOL       reduce using rule 3 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> declaration .

    IF              reduce using rule 4 (statement -> declaration .)
    WHILE           reduce using rule 4 (statement -> declaration .)
    PRINT           reduce using rule 4 (statement -> declaration .)
    READ            reduce using rule 4 (statement -> declaration .)
    TYPE_INT        reduce using rule 4 (statement -> declaration .)
    TYPE_FLOAT      reduce using rule 4 (statement -> declaration .)
    TYPE_STRING     reduce using rule 4 (statement -> declaration .)
    TYPE_CHAR       reduce using rule 4 (statement -> declaration .)
    TYPE_BOOL       reduce using rule 4 (statement -> declaration .)
    IDENTIFIER      reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)
    RBRACE          reduce using rule 4 (statement -> declaration .)


state 5

    (5) statement -> conditional_statement .

    IF              reduce using rule 5 (statement -> conditional_statement .)
    WHILE           reduce using rule 5 (statement -> conditional_statement .)
    PRINT           reduce using rule 5 (statement -> conditional_statement .)
    READ            reduce using rule 5 (statement -> conditional_statement .)
    TYPE_INT        reduce using rule 5 (statement -> conditional_statement .)
    TYPE_FLOAT      reduce using rule 5 (statement -> conditional_statement .)
    TYPE_STRING     reduce using rule 5 (statement -> conditional_statement .)
    TYPE_CHAR       reduce using rule 5 (statement -> conditional_statement .)
    TYPE_BOOL       reduce using rule 5 (statement -> conditional_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> conditional_statement .)
    $end            reduce using rule 5 (statement -> conditional_statement .)
    RBRACE          reduce using rule 5 (statement -> conditional_statement .)


state 6

    (6) statement -> repetition_statement .

    IF              reduce using rule 6 (statement -> repetition_statement .)
    WHILE           reduce using rule 6 (statement -> repetition_statement .)
    PRINT           reduce using rule 6 (statement -> repetition_statement .)
    READ            reduce using rule 6 (statement -> repetition_statement .)
    TYPE_INT        reduce using rule 6 (statement -> repetition_statement .)
    TYPE_FLOAT      reduce using rule 6 (statement -> repetition_statement .)
    TYPE_STRING     reduce using rule 6 (statement -> repetition_statement .)
    TYPE_CHAR       reduce using rule 6 (statement -> repetition_statement .)
    TYPE_BOOL       reduce using rule 6 (statement -> repetition_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> repetition_statement .)
    $end            reduce using rule 6 (statement -> repetition_statement .)
    RBRACE          reduce using rule 6 (statement -> repetition_statement .)


state 7

    (7) statement -> print_statement .

    IF              reduce using rule 7 (statement -> print_statement .)
    WHILE           reduce using rule 7 (statement -> print_statement .)
    PRINT           reduce using rule 7 (statement -> print_statement .)
    READ            reduce using rule 7 (statement -> print_statement .)
    TYPE_INT        reduce using rule 7 (statement -> print_statement .)
    TYPE_FLOAT      reduce using rule 7 (statement -> print_statement .)
    TYPE_STRING     reduce using rule 7 (statement -> print_statement .)
    TYPE_CHAR       reduce using rule 7 (statement -> print_statement .)
    TYPE_BOOL       reduce using rule 7 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 7 (statement -> print_statement .)
    $end            reduce using rule 7 (statement -> print_statement .)
    RBRACE          reduce using rule 7 (statement -> print_statement .)


state 8

    (8) statement -> read_statement .

    IF              reduce using rule 8 (statement -> read_statement .)
    WHILE           reduce using rule 8 (statement -> read_statement .)
    PRINT           reduce using rule 8 (statement -> read_statement .)
    READ            reduce using rule 8 (statement -> read_statement .)
    TYPE_INT        reduce using rule 8 (statement -> read_statement .)
    TYPE_FLOAT      reduce using rule 8 (statement -> read_statement .)
    TYPE_STRING     reduce using rule 8 (statement -> read_statement .)
    TYPE_CHAR       reduce using rule 8 (statement -> read_statement .)
    TYPE_BOOL       reduce using rule 8 (statement -> read_statement .)
    IDENTIFIER      reduce using rule 8 (statement -> read_statement .)
    $end            reduce using rule 8 (statement -> read_statement .)
    RBRACE          reduce using rule 8 (statement -> read_statement .)


state 9

    (17) declaration -> optional_type . IDENTIFIER optional_assignment SEMICOLON

    IDENTIFIER      shift and go to state 21


state 10

    (18) conditional_statement -> IF . LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional

    LPAREN          shift and go to state 22


state 11

    (23) repetition_statement -> WHILE . LPAREN expression RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 23


state 12

    (24) print_statement -> PRINT . LPAREN expression_list RPAREN SEMICOLON

    LPAREN          shift and go to state 24


state 13

    (27) read_statement -> READ . LPAREN identifier_list RPAREN SEMICOLON

    LPAREN          shift and go to state 25


state 14

    (9) optional_type -> TYPE_INT .

    IDENTIFIER      reduce using rule 9 (optional_type -> TYPE_INT .)


state 15

    (10) optional_type -> TYPE_FLOAT .

    IDENTIFIER      reduce using rule 10 (optional_type -> TYPE_FLOAT .)


state 16

    (11) optional_type -> TYPE_STRING .

    IDENTIFIER      reduce using rule 11 (optional_type -> TYPE_STRING .)


state 17

    (12) optional_type -> TYPE_CHAR .

    IDENTIFIER      reduce using rule 12 (optional_type -> TYPE_CHAR .)


state 18

    (13) optional_type -> TYPE_BOOL .

    IDENTIFIER      reduce using rule 13 (optional_type -> TYPE_BOOL .)


state 19

    (14) optional_type -> empty .

    IDENTIFIER      reduce using rule 14 (optional_type -> empty .)


state 20

    (2) statement_list -> statement_list statement .

    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    READ            reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_INT        reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_FLOAT      reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_STRING     reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_CHAR       reduce using rule 2 (statement_list -> statement_list statement .)
    TYPE_BOOL       reduce using rule 2 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)


state 21

    (17) declaration -> optional_type IDENTIFIER . optional_assignment SEMICOLON
    (15) optional_assignment -> . ASSIGN expression
    (16) optional_assignment -> . empty
    (52) empty -> .

    ASSIGN          shift and go to state 27
    SEMICOLON       reduce using rule 52 (empty -> .)

    optional_assignment            shift and go to state 26
    empty                          shift and go to state 28

state 22

    (18) conditional_statement -> IF LPAREN . expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 30

state 23

    (23) repetition_statement -> WHILE LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 39

state 24

    (24) print_statement -> PRINT LPAREN . expression_list RPAREN SEMICOLON
    (25) expression_list -> . expression_list COMMA expression
    (26) expression_list -> . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression_list                shift and go to state 40
    expression                     shift and go to state 41

state 25

    (27) read_statement -> READ LPAREN . identifier_list RPAREN SEMICOLON
    (28) identifier_list -> . identifier_list COMMA IDENTIFIER
    (29) identifier_list -> . IDENTIFIER

    IDENTIFIER      shift and go to state 43

    identifier_list                shift and go to state 42

state 26

    (17) declaration -> optional_type IDENTIFIER optional_assignment . SEMICOLON

    SEMICOLON       shift and go to state 44


state 27

    (15) optional_assignment -> ASSIGN . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 45

state 28

    (16) optional_assignment -> empty .

    SEMICOLON       reduce using rule 16 (optional_assignment -> empty .)


state 29

    (45) expression -> LPAREN . expression RPAREN
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 46

state 30

    (18) conditional_statement -> IF LPAREN expression . RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          shift and go to state 47
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 31

    (44) expression -> MINUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 61

state 32

    (43) expression -> NOT . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 62

state 33

    (46) expression -> INTEGER .

    RPAREN          reduce using rule 46 (expression -> INTEGER .)
    PLUS            reduce using rule 46 (expression -> INTEGER .)
    MINUS           reduce using rule 46 (expression -> INTEGER .)
    TIMES           reduce using rule 46 (expression -> INTEGER .)
    DIVIDE          reduce using rule 46 (expression -> INTEGER .)
    POWER           reduce using rule 46 (expression -> INTEGER .)
    EQ              reduce using rule 46 (expression -> INTEGER .)
    NE              reduce using rule 46 (expression -> INTEGER .)
    LT              reduce using rule 46 (expression -> INTEGER .)
    LE              reduce using rule 46 (expression -> INTEGER .)
    GT              reduce using rule 46 (expression -> INTEGER .)
    GE              reduce using rule 46 (expression -> INTEGER .)
    AND             reduce using rule 46 (expression -> INTEGER .)
    OR              reduce using rule 46 (expression -> INTEGER .)
    COMMA           reduce using rule 46 (expression -> INTEGER .)
    SEMICOLON       reduce using rule 46 (expression -> INTEGER .)


state 34

    (47) expression -> FLOAT_NUM .

    RPAREN          reduce using rule 47 (expression -> FLOAT_NUM .)
    PLUS            reduce using rule 47 (expression -> FLOAT_NUM .)
    MINUS           reduce using rule 47 (expression -> FLOAT_NUM .)
    TIMES           reduce using rule 47 (expression -> FLOAT_NUM .)
    DIVIDE          reduce using rule 47 (expression -> FLOAT_NUM .)
    POWER           reduce using rule 47 (expression -> FLOAT_NUM .)
    EQ              reduce using rule 47 (expression -> FLOAT_NUM .)
    NE              reduce using rule 47 (expression -> FLOAT_NUM .)
    LT              reduce using rule 47 (expression -> FLOAT_NUM .)
    LE              reduce using rule 47 (expression -> FLOAT_NUM .)
    GT              reduce using rule 47 (expression -> FLOAT_NUM .)
    GE              reduce using rule 47 (expression -> FLOAT_NUM .)
    AND             reduce using rule 47 (expression -> FLOAT_NUM .)
    OR              reduce using rule 47 (expression -> FLOAT_NUM .)
    COMMA           reduce using rule 47 (expression -> FLOAT_NUM .)
    SEMICOLON       reduce using rule 47 (expression -> FLOAT_NUM .)


state 35

    (48) expression -> STRING_LITERAL .

    RPAREN          reduce using rule 48 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 48 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 48 (expression -> STRING_LITERAL .)
    TIMES           reduce using rule 48 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 48 (expression -> STRING_LITERAL .)
    POWER           reduce using rule 48 (expression -> STRING_LITERAL .)
    EQ              reduce using rule 48 (expression -> STRING_LITERAL .)
    NE              reduce using rule 48 (expression -> STRING_LITERAL .)
    LT              reduce using rule 48 (expression -> STRING_LITERAL .)
    LE              reduce using rule 48 (expression -> STRING_LITERAL .)
    GT              reduce using rule 48 (expression -> STRING_LITERAL .)
    GE              reduce using rule 48 (expression -> STRING_LITERAL .)
    AND             reduce using rule 48 (expression -> STRING_LITERAL .)
    OR              reduce using rule 48 (expression -> STRING_LITERAL .)
    COMMA           reduce using rule 48 (expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 48 (expression -> STRING_LITERAL .)


state 36

    (49) expression -> IDENTIFIER .

    RPAREN          reduce using rule 49 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 49 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 49 (expression -> IDENTIFIER .)
    TIMES           reduce using rule 49 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 49 (expression -> IDENTIFIER .)
    POWER           reduce using rule 49 (expression -> IDENTIFIER .)
    EQ              reduce using rule 49 (expression -> IDENTIFIER .)
    NE              reduce using rule 49 (expression -> IDENTIFIER .)
    LT              reduce using rule 49 (expression -> IDENTIFIER .)
    LE              reduce using rule 49 (expression -> IDENTIFIER .)
    GT              reduce using rule 49 (expression -> IDENTIFIER .)
    GE              reduce using rule 49 (expression -> IDENTIFIER .)
    AND             reduce using rule 49 (expression -> IDENTIFIER .)
    OR              reduce using rule 49 (expression -> IDENTIFIER .)
    COMMA           reduce using rule 49 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 49 (expression -> IDENTIFIER .)


state 37

    (50) expression -> TRUE .

    RPAREN          reduce using rule 50 (expression -> TRUE .)
    PLUS            reduce using rule 50 (expression -> TRUE .)
    MINUS           reduce using rule 50 (expression -> TRUE .)
    TIMES           reduce using rule 50 (expression -> TRUE .)
    DIVIDE          reduce using rule 50 (expression -> TRUE .)
    POWER           reduce using rule 50 (expression -> TRUE .)
    EQ              reduce using rule 50 (expression -> TRUE .)
    NE              reduce using rule 50 (expression -> TRUE .)
    LT              reduce using rule 50 (expression -> TRUE .)
    LE              reduce using rule 50 (expression -> TRUE .)
    GT              reduce using rule 50 (expression -> TRUE .)
    GE              reduce using rule 50 (expression -> TRUE .)
    AND             reduce using rule 50 (expression -> TRUE .)
    OR              reduce using rule 50 (expression -> TRUE .)
    COMMA           reduce using rule 50 (expression -> TRUE .)
    SEMICOLON       reduce using rule 50 (expression -> TRUE .)


state 38

    (51) expression -> FALSE .

    RPAREN          reduce using rule 51 (expression -> FALSE .)
    PLUS            reduce using rule 51 (expression -> FALSE .)
    MINUS           reduce using rule 51 (expression -> FALSE .)
    TIMES           reduce using rule 51 (expression -> FALSE .)
    DIVIDE          reduce using rule 51 (expression -> FALSE .)
    POWER           reduce using rule 51 (expression -> FALSE .)
    EQ              reduce using rule 51 (expression -> FALSE .)
    NE              reduce using rule 51 (expression -> FALSE .)
    LT              reduce using rule 51 (expression -> FALSE .)
    LE              reduce using rule 51 (expression -> FALSE .)
    GT              reduce using rule 51 (expression -> FALSE .)
    GE              reduce using rule 51 (expression -> FALSE .)
    AND             reduce using rule 51 (expression -> FALSE .)
    OR              reduce using rule 51 (expression -> FALSE .)
    COMMA           reduce using rule 51 (expression -> FALSE .)
    SEMICOLON       reduce using rule 51 (expression -> FALSE .)


state 39

    (23) repetition_statement -> WHILE LPAREN expression . RPAREN LBRACE statement_list RBRACE
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          shift and go to state 63
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 40

    (24) print_statement -> PRINT LPAREN expression_list . RPAREN SEMICOLON
    (25) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 64
    COMMA           shift and go to state 65


state 41

    (26) expression_list -> expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 26 (expression_list -> expression .)
    COMMA           reduce using rule 26 (expression_list -> expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 42

    (27) read_statement -> READ LPAREN identifier_list . RPAREN SEMICOLON
    (28) identifier_list -> identifier_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 66
    COMMA           shift and go to state 67


state 43

    (29) identifier_list -> IDENTIFIER .

    RPAREN          reduce using rule 29 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 29 (identifier_list -> IDENTIFIER .)


state 44

    (17) declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .

    IF              reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    WHILE           reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    PRINT           reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    READ            reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    TYPE_INT        reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    TYPE_FLOAT      reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    TYPE_STRING     reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    TYPE_CHAR       reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    TYPE_BOOL       reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    IDENTIFIER      reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    $end            reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)
    RBRACE          reduce using rule 17 (declaration -> optional_type IDENTIFIER optional_assignment SEMICOLON .)


state 45

    (15) optional_assignment -> ASSIGN expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    SEMICOLON       reduce using rule 15 (optional_assignment -> ASSIGN expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 46

    (45) expression -> LPAREN expression . RPAREN
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          shift and go to state 68
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 47

    (18) conditional_statement -> IF LPAREN expression RPAREN . LBRACE statement_list RBRACE elif_list else_optional

    LBRACE          shift and go to state 69


state 48

    (30) expression -> expression PLUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 70

state 49

    (31) expression -> expression MINUS . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 71

state 50

    (32) expression -> expression TIMES . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 72

state 51

    (33) expression -> expression DIVIDE . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 73

state 52

    (34) expression -> expression POWER . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 74

state 53

    (35) expression -> expression EQ . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 75

state 54

    (36) expression -> expression NE . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 76

state 55

    (37) expression -> expression LT . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 77

state 56

    (38) expression -> expression LE . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 78

state 57

    (39) expression -> expression GT . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 79

state 58

    (40) expression -> expression GE . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 80

state 59

    (41) expression -> expression AND . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 81

state 60

    (42) expression -> expression OR . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 82

state 61

    (44) expression -> MINUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 44 (expression -> MINUS expression .)
    PLUS            reduce using rule 44 (expression -> MINUS expression .)
    MINUS           reduce using rule 44 (expression -> MINUS expression .)
    TIMES           reduce using rule 44 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 44 (expression -> MINUS expression .)
    POWER           reduce using rule 44 (expression -> MINUS expression .)
    EQ              reduce using rule 44 (expression -> MINUS expression .)
    NE              reduce using rule 44 (expression -> MINUS expression .)
    LT              reduce using rule 44 (expression -> MINUS expression .)
    LE              reduce using rule 44 (expression -> MINUS expression .)
    GT              reduce using rule 44 (expression -> MINUS expression .)
    GE              reduce using rule 44 (expression -> MINUS expression .)
    AND             reduce using rule 44 (expression -> MINUS expression .)
    OR              reduce using rule 44 (expression -> MINUS expression .)
    COMMA           reduce using rule 44 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 44 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! POWER           [ shift and go to state 52 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 62

    (43) expression -> NOT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 43 (expression -> NOT expression .)
    AND             reduce using rule 43 (expression -> NOT expression .)
    OR              reduce using rule 43 (expression -> NOT expression .)
    COMMA           reduce using rule 43 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 43 (expression -> NOT expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58

  ! PLUS            [ reduce using rule 43 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 43 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> NOT expression .) ]
  ! POWER           [ reduce using rule 43 (expression -> NOT expression .) ]
  ! EQ              [ reduce using rule 43 (expression -> NOT expression .) ]
  ! NE              [ reduce using rule 43 (expression -> NOT expression .) ]
  ! LT              [ reduce using rule 43 (expression -> NOT expression .) ]
  ! LE              [ reduce using rule 43 (expression -> NOT expression .) ]
  ! GT              [ reduce using rule 43 (expression -> NOT expression .) ]
  ! GE              [ reduce using rule 43 (expression -> NOT expression .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 63

    (23) repetition_statement -> WHILE LPAREN expression RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 83


state 64

    (24) print_statement -> PRINT LPAREN expression_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 84


state 65

    (25) expression_list -> expression_list COMMA . expression
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 85

state 66

    (27) read_statement -> READ LPAREN identifier_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 86


state 67

    (28) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 87


state 68

    (45) expression -> LPAREN expression RPAREN .

    RPAREN          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 45 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 45 (expression -> LPAREN expression RPAREN .)


state 69

    (18) conditional_statement -> IF LPAREN expression RPAREN LBRACE . statement_list RBRACE elif_list else_optional
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 88
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 70

    (30) expression -> expression PLUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 30 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 30 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 30 (expression -> expression PLUS expression .)
    EQ              reduce using rule 30 (expression -> expression PLUS expression .)
    NE              reduce using rule 30 (expression -> expression PLUS expression .)
    LT              reduce using rule 30 (expression -> expression PLUS expression .)
    LE              reduce using rule 30 (expression -> expression PLUS expression .)
    GT              reduce using rule 30 (expression -> expression PLUS expression .)
    GE              reduce using rule 30 (expression -> expression PLUS expression .)
    AND             reduce using rule 30 (expression -> expression PLUS expression .)
    OR              reduce using rule 30 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 30 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 30 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52

  ! TIMES           [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 30 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 71

    (31) expression -> expression MINUS expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 31 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 31 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 31 (expression -> expression MINUS expression .)
    EQ              reduce using rule 31 (expression -> expression MINUS expression .)
    NE              reduce using rule 31 (expression -> expression MINUS expression .)
    LT              reduce using rule 31 (expression -> expression MINUS expression .)
    LE              reduce using rule 31 (expression -> expression MINUS expression .)
    GT              reduce using rule 31 (expression -> expression MINUS expression .)
    GE              reduce using rule 31 (expression -> expression MINUS expression .)
    AND             reduce using rule 31 (expression -> expression MINUS expression .)
    OR              reduce using rule 31 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 31 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 31 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52

  ! TIMES           [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 31 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 72

    (32) expression -> expression TIMES expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 32 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 32 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 32 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 32 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 32 (expression -> expression TIMES expression .)
    EQ              reduce using rule 32 (expression -> expression TIMES expression .)
    NE              reduce using rule 32 (expression -> expression TIMES expression .)
    LT              reduce using rule 32 (expression -> expression TIMES expression .)
    LE              reduce using rule 32 (expression -> expression TIMES expression .)
    GT              reduce using rule 32 (expression -> expression TIMES expression .)
    GE              reduce using rule 32 (expression -> expression TIMES expression .)
    AND             reduce using rule 32 (expression -> expression TIMES expression .)
    OR              reduce using rule 32 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 32 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 32 (expression -> expression TIMES expression .)
    POWER           shift and go to state 52

  ! POWER           [ reduce using rule 32 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 73

    (33) expression -> expression DIVIDE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 33 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 33 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 33 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 33 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 33 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 33 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 33 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 33 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 33 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 33 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 33 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 33 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 33 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 52

  ! POWER           [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 74

    (34) expression -> expression POWER expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 34 (expression -> expression POWER expression .)
    PLUS            reduce using rule 34 (expression -> expression POWER expression .)
    MINUS           reduce using rule 34 (expression -> expression POWER expression .)
    TIMES           reduce using rule 34 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 34 (expression -> expression POWER expression .)
    EQ              reduce using rule 34 (expression -> expression POWER expression .)
    NE              reduce using rule 34 (expression -> expression POWER expression .)
    LT              reduce using rule 34 (expression -> expression POWER expression .)
    LE              reduce using rule 34 (expression -> expression POWER expression .)
    GT              reduce using rule 34 (expression -> expression POWER expression .)
    GE              reduce using rule 34 (expression -> expression POWER expression .)
    AND             reduce using rule 34 (expression -> expression POWER expression .)
    OR              reduce using rule 34 (expression -> expression POWER expression .)
    COMMA           reduce using rule 34 (expression -> expression POWER expression .)
    SEMICOLON       reduce using rule 34 (expression -> expression POWER expression .)
    POWER           shift and go to state 52

  ! POWER           [ reduce using rule 34 (expression -> expression POWER expression .) ]
  ! PLUS            [ shift and go to state 48 ]
  ! MINUS           [ shift and go to state 49 ]
  ! TIMES           [ shift and go to state 50 ]
  ! DIVIDE          [ shift and go to state 51 ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 75

    (35) expression -> expression EQ expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 35 (expression -> expression EQ expression .)
    EQ              reduce using rule 35 (expression -> expression EQ expression .)
    NE              reduce using rule 35 (expression -> expression EQ expression .)
    LT              reduce using rule 35 (expression -> expression EQ expression .)
    LE              reduce using rule 35 (expression -> expression EQ expression .)
    GT              reduce using rule 35 (expression -> expression EQ expression .)
    GE              reduce using rule 35 (expression -> expression EQ expression .)
    AND             reduce using rule 35 (expression -> expression EQ expression .)
    OR              reduce using rule 35 (expression -> expression EQ expression .)
    COMMA           reduce using rule 35 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 35 (expression -> expression EQ expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52

  ! PLUS            [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! POWER           [ reduce using rule 35 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 76

    (36) expression -> expression NE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 36 (expression -> expression NE expression .)
    EQ              reduce using rule 36 (expression -> expression NE expression .)
    NE              reduce using rule 36 (expression -> expression NE expression .)
    LT              reduce using rule 36 (expression -> expression NE expression .)
    LE              reduce using rule 36 (expression -> expression NE expression .)
    GT              reduce using rule 36 (expression -> expression NE expression .)
    GE              reduce using rule 36 (expression -> expression NE expression .)
    AND             reduce using rule 36 (expression -> expression NE expression .)
    OR              reduce using rule 36 (expression -> expression NE expression .)
    COMMA           reduce using rule 36 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression NE expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52

  ! PLUS            [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! POWER           [ reduce using rule 36 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 77

    (37) expression -> expression LT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 37 (expression -> expression LT expression .)
    EQ              reduce using rule 37 (expression -> expression LT expression .)
    NE              reduce using rule 37 (expression -> expression LT expression .)
    LT              reduce using rule 37 (expression -> expression LT expression .)
    LE              reduce using rule 37 (expression -> expression LT expression .)
    GT              reduce using rule 37 (expression -> expression LT expression .)
    GE              reduce using rule 37 (expression -> expression LT expression .)
    AND             reduce using rule 37 (expression -> expression LT expression .)
    OR              reduce using rule 37 (expression -> expression LT expression .)
    COMMA           reduce using rule 37 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 37 (expression -> expression LT expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52

  ! PLUS            [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! POWER           [ reduce using rule 37 (expression -> expression LT expression .) ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 78

    (38) expression -> expression LE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 38 (expression -> expression LE expression .)
    EQ              reduce using rule 38 (expression -> expression LE expression .)
    NE              reduce using rule 38 (expression -> expression LE expression .)
    LT              reduce using rule 38 (expression -> expression LE expression .)
    LE              reduce using rule 38 (expression -> expression LE expression .)
    GT              reduce using rule 38 (expression -> expression LE expression .)
    GE              reduce using rule 38 (expression -> expression LE expression .)
    AND             reduce using rule 38 (expression -> expression LE expression .)
    OR              reduce using rule 38 (expression -> expression LE expression .)
    COMMA           reduce using rule 38 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression LE expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52

  ! PLUS            [ reduce using rule 38 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression LE expression .) ]
  ! POWER           [ reduce using rule 38 (expression -> expression LE expression .) ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 79

    (39) expression -> expression GT expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 39 (expression -> expression GT expression .)
    EQ              reduce using rule 39 (expression -> expression GT expression .)
    NE              reduce using rule 39 (expression -> expression GT expression .)
    LT              reduce using rule 39 (expression -> expression GT expression .)
    LE              reduce using rule 39 (expression -> expression GT expression .)
    GT              reduce using rule 39 (expression -> expression GT expression .)
    GE              reduce using rule 39 (expression -> expression GT expression .)
    AND             reduce using rule 39 (expression -> expression GT expression .)
    OR              reduce using rule 39 (expression -> expression GT expression .)
    COMMA           reduce using rule 39 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression GT expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52

  ! PLUS            [ reduce using rule 39 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression GT expression .) ]
  ! POWER           [ reduce using rule 39 (expression -> expression GT expression .) ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 80

    (40) expression -> expression GE expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 40 (expression -> expression GE expression .)
    EQ              reduce using rule 40 (expression -> expression GE expression .)
    NE              reduce using rule 40 (expression -> expression GE expression .)
    LT              reduce using rule 40 (expression -> expression GE expression .)
    LE              reduce using rule 40 (expression -> expression GE expression .)
    GT              reduce using rule 40 (expression -> expression GE expression .)
    GE              reduce using rule 40 (expression -> expression GE expression .)
    AND             reduce using rule 40 (expression -> expression GE expression .)
    OR              reduce using rule 40 (expression -> expression GE expression .)
    COMMA           reduce using rule 40 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 40 (expression -> expression GE expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52

  ! PLUS            [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! POWER           [ reduce using rule 40 (expression -> expression GE expression .) ]
  ! EQ              [ shift and go to state 53 ]
  ! NE              [ shift and go to state 54 ]
  ! LT              [ shift and go to state 55 ]
  ! LE              [ shift and go to state 56 ]
  ! GT              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 81

    (41) expression -> expression AND expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 41 (expression -> expression AND expression .)
    AND             reduce using rule 41 (expression -> expression AND expression .)
    OR              reduce using rule 41 (expression -> expression AND expression .)
    COMMA           reduce using rule 41 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 41 (expression -> expression AND expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58

  ! PLUS            [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! POWER           [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 41 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 82

    (42) expression -> expression OR expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 42 (expression -> expression OR expression .)
    OR              reduce using rule 42 (expression -> expression OR expression .)
    COMMA           reduce using rule 42 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 42 (expression -> expression OR expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58
    AND             shift and go to state 59

  ! PLUS            [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! POWER           [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 42 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 60 ]


state 83

    (23) repetition_statement -> WHILE LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 89
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 84

    (24) print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .

    IF              reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    READ            reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    TYPE_INT        reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    TYPE_FLOAT      reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    TYPE_STRING     reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    TYPE_CHAR       reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    TYPE_BOOL       reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    $end            reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)
    RBRACE          reduce using rule 24 (print_statement -> PRINT LPAREN expression_list RPAREN SEMICOLON .)


state 85

    (25) expression_list -> expression_list COMMA expression .
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          reduce using rule 25 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 25 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 86

    (27) read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .

    IF              reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    READ            reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    TYPE_INT        reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    TYPE_FLOAT      reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    TYPE_STRING     reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    TYPE_CHAR       reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    TYPE_BOOL       reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    $end            reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)
    RBRACE          reduce using rule 27 (read_statement -> READ LPAREN identifier_list RPAREN SEMICOLON .)


state 87

    (28) identifier_list -> identifier_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 28 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 28 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 88

    (18) conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list . RBRACE elif_list else_optional
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    RBRACE          shift and go to state 90
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    statement                      shift and go to state 20
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 89

    (23) repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    RBRACE          shift and go to state 91
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    statement                      shift and go to state 20
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 90

    (18) conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE . elif_list else_optional
    (19) elif_list -> . elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (20) elif_list -> . empty
    (52) empty -> .

    ELIF            reduce using rule 52 (empty -> .)
    ELSE            reduce using rule 52 (empty -> .)
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    PRINT           reduce using rule 52 (empty -> .)
    READ            reduce using rule 52 (empty -> .)
    TYPE_INT        reduce using rule 52 (empty -> .)
    TYPE_FLOAT      reduce using rule 52 (empty -> .)
    TYPE_STRING     reduce using rule 52 (empty -> .)
    TYPE_CHAR       reduce using rule 52 (empty -> .)
    TYPE_BOOL       reduce using rule 52 (empty -> .)
    IDENTIFIER      reduce using rule 52 (empty -> .)
    $end            reduce using rule 52 (empty -> .)
    RBRACE          reduce using rule 52 (empty -> .)

    elif_list                      shift and go to state 92
    empty                          shift and go to state 93

state 91

    (23) repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .

    IF              reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    READ            reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_INT        reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_FLOAT      reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_STRING     reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_CHAR       reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_BOOL       reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 23 (repetition_statement -> WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE .)


state 92

    (18) conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list . else_optional
    (19) elif_list -> elif_list . ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE
    (21) else_optional -> . ELSE LBRACE statement_list RBRACE
    (22) else_optional -> . empty
    (52) empty -> .

    ELIF            shift and go to state 95
    ELSE            shift and go to state 96
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    PRINT           reduce using rule 52 (empty -> .)
    READ            reduce using rule 52 (empty -> .)
    TYPE_INT        reduce using rule 52 (empty -> .)
    TYPE_FLOAT      reduce using rule 52 (empty -> .)
    TYPE_STRING     reduce using rule 52 (empty -> .)
    TYPE_CHAR       reduce using rule 52 (empty -> .)
    TYPE_BOOL       reduce using rule 52 (empty -> .)
    IDENTIFIER      reduce using rule 52 (empty -> .)
    $end            reduce using rule 52 (empty -> .)
    RBRACE          reduce using rule 52 (empty -> .)

    else_optional                  shift and go to state 94
    empty                          shift and go to state 97

state 93

    (20) elif_list -> empty .

    ELIF            reduce using rule 20 (elif_list -> empty .)
    ELSE            reduce using rule 20 (elif_list -> empty .)
    IF              reduce using rule 20 (elif_list -> empty .)
    WHILE           reduce using rule 20 (elif_list -> empty .)
    PRINT           reduce using rule 20 (elif_list -> empty .)
    READ            reduce using rule 20 (elif_list -> empty .)
    TYPE_INT        reduce using rule 20 (elif_list -> empty .)
    TYPE_FLOAT      reduce using rule 20 (elif_list -> empty .)
    TYPE_STRING     reduce using rule 20 (elif_list -> empty .)
    TYPE_CHAR       reduce using rule 20 (elif_list -> empty .)
    TYPE_BOOL       reduce using rule 20 (elif_list -> empty .)
    IDENTIFIER      reduce using rule 20 (elif_list -> empty .)
    $end            reduce using rule 20 (elif_list -> empty .)
    RBRACE          reduce using rule 20 (elif_list -> empty .)


state 94

    (18) conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .

    IF              reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    WHILE           reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    PRINT           reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    READ            reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    TYPE_INT        reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    TYPE_FLOAT      reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    TYPE_STRING     reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    TYPE_CHAR       reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    TYPE_BOOL       reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    IDENTIFIER      reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    $end            reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)
    RBRACE          reduce using rule 18 (conditional_statement -> IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional .)


state 95

    (19) elif_list -> elif_list ELIF . LPAREN expression RPAREN LBRACE statement_list RBRACE

    LPAREN          shift and go to state 98


state 96

    (21) else_optional -> ELSE . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 99


state 97

    (22) else_optional -> empty .

    IF              reduce using rule 22 (else_optional -> empty .)
    WHILE           reduce using rule 22 (else_optional -> empty .)
    PRINT           reduce using rule 22 (else_optional -> empty .)
    READ            reduce using rule 22 (else_optional -> empty .)
    TYPE_INT        reduce using rule 22 (else_optional -> empty .)
    TYPE_FLOAT      reduce using rule 22 (else_optional -> empty .)
    TYPE_STRING     reduce using rule 22 (else_optional -> empty .)
    TYPE_CHAR       reduce using rule 22 (else_optional -> empty .)
    TYPE_BOOL       reduce using rule 22 (else_optional -> empty .)
    IDENTIFIER      reduce using rule 22 (else_optional -> empty .)
    $end            reduce using rule 22 (else_optional -> empty .)
    RBRACE          reduce using rule 22 (else_optional -> empty .)


state 98

    (19) elif_list -> elif_list ELIF LPAREN . expression RPAREN LBRACE statement_list RBRACE
    (30) expression -> . expression PLUS expression
    (31) expression -> . expression MINUS expression
    (32) expression -> . expression TIMES expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression POWER expression
    (35) expression -> . expression EQ expression
    (36) expression -> . expression NE expression
    (37) expression -> . expression LT expression
    (38) expression -> . expression LE expression
    (39) expression -> . expression GT expression
    (40) expression -> . expression GE expression
    (41) expression -> . expression AND expression
    (42) expression -> . expression OR expression
    (43) expression -> . NOT expression
    (44) expression -> . MINUS expression
    (45) expression -> . LPAREN expression RPAREN
    (46) expression -> . INTEGER
    (47) expression -> . FLOAT_NUM
    (48) expression -> . STRING_LITERAL
    (49) expression -> . IDENTIFIER
    (50) expression -> . TRUE
    (51) expression -> . FALSE

    NOT             shift and go to state 32
    MINUS           shift and go to state 31
    LPAREN          shift and go to state 29
    INTEGER         shift and go to state 33
    FLOAT_NUM       shift and go to state 34
    STRING_LITERAL  shift and go to state 35
    IDENTIFIER      shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    expression                     shift and go to state 100

state 99

    (21) else_optional -> ELSE LBRACE . statement_list RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 101
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 100

    (19) elif_list -> elif_list ELIF LPAREN expression . RPAREN LBRACE statement_list RBRACE
    (30) expression -> expression . PLUS expression
    (31) expression -> expression . MINUS expression
    (32) expression -> expression . TIMES expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . POWER expression
    (35) expression -> expression . EQ expression
    (36) expression -> expression . NE expression
    (37) expression -> expression . LT expression
    (38) expression -> expression . LE expression
    (39) expression -> expression . GT expression
    (40) expression -> expression . GE expression
    (41) expression -> expression . AND expression
    (42) expression -> expression . OR expression

    RPAREN          shift and go to state 102
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    TIMES           shift and go to state 50
    DIVIDE          shift and go to state 51
    POWER           shift and go to state 52
    EQ              shift and go to state 53
    NE              shift and go to state 54
    LT              shift and go to state 55
    LE              shift and go to state 56
    GT              shift and go to state 57
    GE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 101

    (21) else_optional -> ELSE LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    RBRACE          shift and go to state 103
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    statement                      shift and go to state 20
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 102

    (19) elif_list -> elif_list ELIF LPAREN expression RPAREN . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 104


state 103

    (21) else_optional -> ELSE LBRACE statement_list RBRACE .

    IF              reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    READ            reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    TYPE_INT        reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    TYPE_FLOAT      reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    TYPE_STRING     reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    TYPE_CHAR       reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    TYPE_BOOL       reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    $end            reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 21 (else_optional -> ELSE LBRACE statement_list RBRACE .)


state 104

    (19) elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE . statement_list RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    statement_list                 shift and go to state 105
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 105

    (19) elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . conditional_statement
    (6) statement -> . repetition_statement
    (7) statement -> . print_statement
    (8) statement -> . read_statement
    (17) declaration -> . optional_type IDENTIFIER optional_assignment SEMICOLON
    (18) conditional_statement -> . IF LPAREN expression RPAREN LBRACE statement_list RBRACE elif_list else_optional
    (23) repetition_statement -> . WHILE LPAREN expression RPAREN LBRACE statement_list RBRACE
    (24) print_statement -> . PRINT LPAREN expression_list RPAREN SEMICOLON
    (27) read_statement -> . READ LPAREN identifier_list RPAREN SEMICOLON
    (9) optional_type -> . TYPE_INT
    (10) optional_type -> . TYPE_FLOAT
    (11) optional_type -> . TYPE_STRING
    (12) optional_type -> . TYPE_CHAR
    (13) optional_type -> . TYPE_BOOL
    (14) optional_type -> . empty
    (52) empty -> .

    RBRACE          shift and go to state 106
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    PRINT           shift and go to state 12
    READ            shift and go to state 13
    TYPE_INT        shift and go to state 14
    TYPE_FLOAT      shift and go to state 15
    TYPE_STRING     shift and go to state 16
    TYPE_CHAR       shift and go to state 17
    TYPE_BOOL       shift and go to state 18
    IDENTIFIER      reduce using rule 52 (empty -> .)

    statement                      shift and go to state 20
    declaration                    shift and go to state 4
    conditional_statement          shift and go to state 5
    repetition_statement           shift and go to state 6
    print_statement                shift and go to state 7
    read_statement                 shift and go to state 8
    optional_type                  shift and go to state 9
    empty                          shift and go to state 19

state 106

    (19) elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .

    ELIF            reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IF              reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    PRINT           reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    READ            reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_INT        reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_FLOAT      reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_STRING     reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_CHAR       reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    TYPE_BOOL       reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    $end            reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 19 (elif_list -> elif_list ELIF LPAREN expression RPAREN LBRACE statement_list RBRACE .)

